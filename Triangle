Q Link: https://www.codingninjas.com/studio/problems/triangle_1229398?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTab=0

#include <bits/stdc++.h> 

// int solve(vector<vector<int>>& dp, int i, int j, vector<vector<int>>& triangle){
//     if (i == triangle.size() - 1){
//         return triangle[i][j];
//     }
//     if (dp[i][j] != -1)
//         return dp[i][j];
//     int dia = triangle[i][j] + solve(dp, i + 1, j + 1, triangle);
//     int down = triangle[i][j] + solve(dp, i + 1, j, triangle);

//     return dp[i][j] = min(dia, down);
// }

int minimumPathSum(vector<vector<int>>& triangle, int n){ 
    vector<vector<int>> dp(n, vector<int>(n, 0)); 
	for(int j = 0; j< n ; j++)dp[n-1][j] = triangle[n-1][j];
	for(int i = n-2; i>= 0 ; i--){
		for(int j = i; j>= 0 ; j--){
			int d = triangle[i][j] + dp[i+1][j];
			int de = triangle[i][j] + dp[i+1][j+1];
			dp[i][j] = min(d, de); 
		}
	}
    return dp[0][0];
}
