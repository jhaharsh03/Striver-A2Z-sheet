Q Link: https://practice.geeksforgeeks.org/problems/shortest-path-in-undirected-graph/1

class Solution {
  public:
    void toposort(int node, vector<pair<int, int>> adj[], int vis[], stack<int>& st) {
        vis[node] = 1;
        for (auto t : adj[node]) {
            if (!vis[t.first]) {
                toposort(t.first, adj, vis, st);
            }
        }
        st.push(node);
    }

  
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        // code here
        int n = N;
        vector<pair<int, int>> adj[N];
        for (auto t : edges) {
            adj[t[0]].push_back({ t[1], t[2] });
        }

        stack<int> st;
        int vis[N] = { 0 };

        for (int i = 0; i < N; i++) {
            if (!vis[i]) {
                toposort(i, adj, vis, st);
            }
        }

        vector<int> dist(N, INT_MAX);
        dist[0] = 0;

        while (!st.empty()) {
            int node = st.top();
            st.pop();

            if (dist[node] != INT_MAX) {
                for (auto it : adj[node]) {
                    int v = it.first;
                    int wt = it.second;
                    if (dist[node] + wt < dist[v]) {
                        dist[v] = dist[node] + wt;
                    }
                }
            }
        }

        for (int i = 0; i < N; i++) {
            if (dist[i] == INT_MAX) {
                dist[i] = -1;
            }
        }

        return dist;
    }
};
