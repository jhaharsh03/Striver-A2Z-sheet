Q Link: https://www.codingninjas.com/studio/problems/house-robber-ii_839733?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTab=0




#include <bits/stdc++.h> 

long long solve1(vector<int>& first, int i, vector<long long>& dp1){
    if(i >= first.size()) return 0; 
    if(dp1[i] != -1) return dp1[i];
    long long take = first[i] + solve1(first, i+2, dp1);
    long long nottake = solve1(first, i+1, dp1);
    return dp1[i] = max(take, nottake);
}

long long solve2(vector<int>& second, int i, vector<long long>& dp2){
    if(i >= second.size()) return 0; 
    if(dp2[i] != -1) return dp2[i];
    long long take = second[i] + solve2(second, i+2, dp2);
    long long nottake = solve2(second, i+1, dp2);
    return dp2[i] = max(take, nottake);
}

long long int houseRobber(vector<int>& valueInHouse)
{
    int n = valueInHouse.size(); 
    if(n == 1)return valueInHouse[0];
    vector<int> first, second; 
    for(int i = 0; i < n ; i++){
        if(i != 0) second.push_back(valueInHouse[i]);
        if(i != n-1) first.push_back(valueInHouse[i]);
    }
    vector<long long> dp1(n, -1);
    vector<long long> dp2(n, -1);
    return max(solve1(first, 0, dp1), solve2(second, 0, dp2));
}
