Q Link: https://practice.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1

class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool detect(int node, int V, vector<int> adj[],int vis[]){
        vis[node] = 1;
        queue<pair<int, int>> q;
        q.push({node, -1});
        while(!q.empty()){
            int currnode = q.front().first; 
            int parent = q.front().second;
            q.pop(); 
            for(auto t : adj[currnode]){
                if(!vis[t]){
                    vis[t] = 1; 
                    q.push({t, currnode});
                }
                else if(t != parent){
                    return true;
                }
            }
        }
        return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        int vis[V] = {0};
        
        for(int i = 0; i< V ; i++){
            if(!vis[i]){
                if(detect(i, V, adj, vis)){
                    return true;
                }
            }
        }
        return false;
    }
};
