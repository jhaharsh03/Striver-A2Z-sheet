Q Link: https://practice.geeksforgeeks.org/problems/topological-sort/1

class Solution
{
    private:
    void dfs(int V, vector<int> adj[], int vis[], stack<int>& st, int node){
        vis[node]  = 1; 
        for(auto it : adj[node]){
            if(!vis[it]){
                dfs(V, adj, vis, st, it);
            }
        }
        st.push(node);
    }
    
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    int vis[V] = {0};
	    stack<int> st;
	    for(int i = 0; i< V; i++){
	        if(!vis[i]){
	            dfs(V, adj, vis, st, i);
	        }
	    }
	    vector<int> res;
	    while(!st.empty()){
	        res.push_back(st.top());
	        st.pop();
	    }
	    return res;
	}
};
