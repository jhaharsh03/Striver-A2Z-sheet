Q Link : https://leetcode.com/problems/climbing-stairs/description/

Memoization Approach:>

class Solution {
public:

    int findways(int n , vector<int> &dp){
        if(n <= 1)return 1; 
        if(dp[n] != -1)return dp[n];
        return dp[n] = findways(n-1, dp) + findways(n-2, dp);
    }

    int climbStairs(int n) {
        vector<int> dp(n+1, -1);
        return findways(n, dp);
    }
};

Tabulation:>



class Solution {
public:
    int climbStairs(int n) {
        vector<int> dp(n+1, -1);
        dp[0] =1, dp[1] = 1; 
        for(int i = 2 ; i<n+1; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
};



Space Optimization>
class Solution {
public:
    int climbStairs(int n) {
        int pre = 1; 
        int pre2 = 1; 
        for(int i = 2; i<=n ; i++){
            int curr = pre + pre2; 
            pre2 = pre; 
            pre = curr;
        }
        return pre;
    }
};


