Q Link: https://practice.geeksforgeeks.org/problems/number-of-distinct-islands/1

class Solution {
  private:
    void dfs(int row, int col,vector<vector<int>>& grid, vector<vector<int>> &vis,
    vector<pair<int, int>> &vec, int row0, int col0){
        vis[row][col] = 1;
        int n = grid.size(), m = grid[0].size(); 
        vec.push_back({row-row0, col-col0});
        int delrow[] = {-1, 0, +1, 0};
        int delcol[] = {0, +1, 0, -1};
        for(int it = 0; it<4; it++){
            int norow = row + delrow[it];
            int nocol = col + delcol[it];
            if((norow >= 0 && norow < n) && (nocol >= 0 && nocol < m) &&
            !vis[norow][nocol] && grid[norow][nocol] == 1){
                dfs(norow, nocol, grid, vis, vec, row0, col0);
            }
        }
    }

  public:
    int countDistinctIslands(vector<vector<int>>& grid) {
        // code here
        int n = grid.size(), m = grid[0].size(); 
        vector<vector<int>> vis(n, vector<int>(m, 0));
        set<vector<pair<int, int>>> st;
        for(int i = 0; i< n ; i++){
            for(int j = 0; j<m ; j++){
                if(grid[i][j] == 1 && vis[i][j] == 0){
                    vector<pair<int, int>> vec;
                    dfs(i, j, grid, vis, vec, i, j);
                    st.insert(vec);
                }
            }
        }
        return st.size();
    }
};
